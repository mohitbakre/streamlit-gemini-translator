import streamlit as st
import google.generativeai as genai
import os

# --- Configuration ---
# Configure Google Gemini API key from Streamlit secrets
if "GOOGLE_API_KEY" in st.secrets:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
else:
    st.error("Google API Key not found in Streamlit secrets. Please add it to .streamlit/secrets.toml")
    st.stop() # Stop the app if API key is missing

# Initialize the Generative Model
#model = genai.GenerativeModel('gemini-pro')

# Attempt to use a common, stable model.
# You can check the output of list_available_gemini_models() to pick the best one for you.
# Common choices: 'gemini-1.5-pro-latest', 'gemini-1.5-flash-latest', 'gemini-pro' (if still available for your key)
# Let's try 'gemini-1.5-pro-latest' as it's a good general-purpose model.
# If that still gives 404, try 'gemini-1.5-flash-latest' as it's usually more widely available.

MODEL_NAME = "gemini-1.5-flash-latest" # Try this first
# MODEL_NAME = "gemini-1.5-flash-latest" # If "gemini-1.5-pro-latest" doesn't work, try this one.
# MODEL_NAME = "gemini-pro" # Keep this as a fallback for older keys, but likely the cause of the 404.

try:
    model = genai.GenerativeModel(MODEL_NAME)
except Exception as e:
    st.error(f"Failed to load model '{MODEL_NAME}': {e}")
    st.info("Please check the model name. You can use `list_available_gemini_models()` to see what's available for your API key.")
    st.stop() # Stop the app if model loading fails


# --- Language Options ---
# A simplified list of common languages for demonstration.
# In a real app, you'd use a more comprehensive list with ISO codes.
LANGUAGES = {
    "English": "English",
    "Hindi": "Hindi",
    "Spanish": "Spanish",
    "French": "French",
    "German": "German",
    "Japanese": "Japanese",
    "Chinese (Simplified)": "Chinese (Simplified)",
    "Telugu": "Telugu",
    "Tamil": "Tamil",
    "Kannada": "Kannada",
    "Malayalam": "Malayalam",
    "Bengali": "Bengali",
    "Gujarati": "Gujarati",
    "Punjabi": "Punjabi"
}

# --- Streamlit UI ---
st.set_page_config(page_title="AI Language Translator", layout="centered")

st.title("üó£Ô∏è AI Language Translator")
st.markdown("Powered by Google Gemini API")

# Language Selection
col1, col2 = st.columns(2)
with col1:
    source_language = st.selectbox("Source Language", list(LANGUAGES.keys()), index=0) # Default to English
with col2:
    target_language = st.selectbox("Target Language", list(LANGUAGES.keys()), index=1) # Default to Hindi

# Text Input
st.subheader("Enter Text to Translate:")
user_input = st.text_area("Your text here", height=150, placeholder="Type or paste your text here...")

# Translate Button
if st.button("Translate", type="primary"):
    if user_input:
        with st.spinner(f"Translating from {source_language} to {target_language}..."):
            try:
                # Construct the prompt for Gemini
                prompt = f"Translate the following {source_language} text to {target_language}: \"{user_input}\""

                # Make the API call to Gemini
                response = model.generate_content(prompt)

                # Display the translated text
                st.subheader("Translated Text:")
                st.success(response.text) # Access the generated text

            except Exception as e:
                st.error(f"An error occurred during translation: {e}")
                st.info("Please try again or check your API key/network connection.")
    else:
        st.warning("Please enter some text to translate.")

st.markdown("---")
st.caption("Disclaimer: Translations are generated by AI and may not always be perfectly accurate. This is a demo app.")

# Optional: Add conversation history (simple chat window style)
# This will be more relevant when we build the full chat experience.
# For now, let's keep it simple with direct input/output.